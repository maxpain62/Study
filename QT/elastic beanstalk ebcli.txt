reference:- https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html

create elastic beanstalk with ebcli

create user and attach IAM policy to user
refer below policy:-
==================
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "rds:*",
                "apigateway:*",
                "s3:*",
                "IAM:*",
                "cloudtrail:*",
                "cloudformation:*",
                "elasticloadbalancing:*",
                "elasticbeanstalk:CreateStorageLocation",
                "autoscaling-plans:*",
                "autoscaling:*",
                "elasticbeanstalk:CheckDNSAvailability",
                "elasticbeanstalk:ListPlatformBranches",
                "elasticbeanstalk:*",
                "cloudfront:*",
                "glacier:*",
                "cloudwatch:*",
                "lambda:*",
                "ec2:*",
                "eks:*"
            ],
            "Resource": "*"
        }
    ]
}
==================


sudo apt update
sudo apt install unzip -y

step1 - run below commands to download and install aws:-
==================
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws configure
=================

step2 -  run below commansd to install python3, pip, and awsebcli
=================
sudo apt install python3-pip -y
pip install awsebcli --upgrade --user
echo "export PATH=~/.local/bin:$PATH" >> .bashrc ; source .bashrc; tail .bashrc
=================

step3 - execute below commands to create directory and run virtual env
=================
mkdir eb-flask
cd eb-flask
virtualenv virt
sudo apt install python3-virtualenv
virtualenv virt
source virt/bin/activate
pip install flask==2.0.3
pip freeze
pip freeze > requirements.txt
=================


step4 - create application.pt and insert sample code in it

=================
touch application.py

vi application.py

from flask import Flask

# print a nice greeting.
def say_hello(username = "World"):
    return '<p>Hello %s!</p>\n' % username

# some bits of text for the page.
header_text = '''
    <html>\n<head> <title>EB Flask Test</title> </head>\n<body>'''
instructions = '''
    <p><em>Hint</em>: This is a RESTful web service! Append a username
    to the URL (for example: <code>/Thelonious</code>) to say hello to
    someone specific.</p>\n'''
home_link = '<p><a href="/">Back</a></p>\n'
footer_text = '</body>\n</html>'

# EB looks for an 'application' callable by default.
application = Flask(__name__)

# add a rule for the index page.
application.add_url_rule('/', 'index', (lambda: header_text +
    say_hello() + instructions + footer_text))

# add a rule when the page is accessed with a name appended to the site
# URL.
application.add_url_rule('/<username>', 'hello', (lambda username:
    header_text + say_hello(username) + home_link + footer_text))

# run the app.
if __name__ == "__main__":
    # Setting debug to True enables debug output. This line should be
    # removed before deploying a production app.
    application.debug = True
    application.run()
===============

step4 - run python app with below command
===============
python application.py
===============

step5 - run below commands to deploy app on elastic bealstalk
===============
vi .ebignore #add an .ebignore file that tells the EB CLI to leave out the virt folder
virt


eb init -p python-3.7 flask-tutorial --region ap-south-1
eb init
eb create flask-env
===============
