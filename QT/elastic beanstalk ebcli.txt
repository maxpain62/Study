create elastic beanstalk with ebcli

step 1 - sudo apt update
step 2 - sudo apt install unzip -y
step 3 - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
step 4 - unzip awscliv2.zip
step 5 - sudo ./aws/install
step 6 - aws configure
step 7 - sudo apt install python3-pip -y
step 8 - pip install awsebcli --upgrade --user
step 9 - echo "export PATH=~/.local/bin:$PATH" >> .bashrc ; source .bashrc; tail .bashrc

mkdir eb-flask

cd eb-flask

virtualenv virt


sudo apt install python3-virtualenv

virtualenv virt


 source virt/bin/activate


pip install flask==2.0.3

 pip freeze
 
 pip freeze > requirements.txt
 
 touch application.py

###############
vi application.py
from flask import Flask

# print a nice greeting.
def say_hello(username = "World"):
    return '<p>Hello %s!</p>\n' % username

# some bits of text for the page.
header_text = '''
    <html>\n<head> <title>EB Flask Test</title> </head>\n<body>'''
instructions = '''
    <p><em>Hint</em>: This is a RESTful web service! Append a username
    to the URL (for example: <code>/Thelonious</code>) to say hello to
    someone specific.</p>\n'''
home_link = '<p><a href="/">Back</a></p>\n'
footer_text = '</body>\n</html>'

# EB looks for an 'application' callable by default.
application = Flask(__name__)

# add a rule for the index page.
application.add_url_rule('/', 'index', (lambda: header_text +
    say_hello() + instructions + footer_text))

# add a rule when the page is accessed with a name appended to the site
# URL.
application.add_url_rule('/<username>', 'hello', (lambda username:
    header_text + say_hello(username) + home_link + footer_text))

# run the app.
if __name__ == "__main__":
    # Setting debug to True enables debug output. This line should be
    # removed before deploying a production app.
    application.debug = True
    application.run()


python application.py


virt



eb init -p python-3.7 flask-tutorial --region ap-south-1

eb init

eb create flask-env

